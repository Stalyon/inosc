import { Component, OnInit } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
import { FormBuilder, Validators } from '@angular/forms';
import { ActivatedRoute } from '@angular/router';
import { Observable } from 'rxjs';

import { IItem, Item } from 'app/shared/model/item.model';
import { ItemService } from './item.service';

@Component({
  selector: 'jhi-item-update',
  templateUrl: './item-update.component.html'
})
export class ItemUpdateComponent implements OnInit {
  isSaving = false;
  slEffectiveFromDateDp: any;
  itemCreationDateDp: any;

  editForm = this.fb.group({
    id: [],
    organizationCode: [null, [Validators.maxLength(3)]],
    businessUnit: [null, [Validators.maxLength(7)]],
    businessUnitDescription: [null, [Validators.maxLength(60)]],
    businessField: [null, [Validators.maxLength(6)]],
    businessFieldDescription: [null, [Validators.maxLength(60)]],
    businessLine: [null, [Validators.maxLength(5)]],
    businessLineDescription: [null, [Validators.maxLength(60)]],
    workcenter: [null, [Validators.maxLength(5)]],
    productGroup: [null, [Validators.maxLength(7)]],
    productGroupDescription: [null, [Validators.maxLength(60)]],
    productCategory: [null, [Validators.maxLength(3)]],
    productCategoryDescription: [null, [Validators.maxLength(60)]],
    productLine: [null, [Validators.maxLength(2)]],
    productLineDescription: [null, [Validators.maxLength(60)]],
    productLineManager: [null, [Validators.maxLength(60)]],
    productDivision: [null, [Validators.maxLength(10)]],
    productCategoryManager: [null, [Validators.maxLength(60)]],
    plantCategory: [null, [Validators.maxLength(2)]],
    itemType: [null, [Validators.maxLength(5)]],
    primaryUnitOfMeasure: [null, [Validators.maxLength(2)]],
    itemNumber: [null, [Validators.required, Validators.maxLength(18)]],
    itemDescription: [null, [Validators.maxLength(60)]],
    inventoryItemStatusCode: [null, [Validators.maxLength(8)]],
    planningMakeOrBuyCode: [null, [Validators.maxLength(4)]],
    itemPlannerCode: [null, [Validators.maxLength(4)]],
    plannerName: [null, [Validators.maxLength(60)]],
    mrpPlanningMethod: [null, [Validators.maxLength(15)]],
    inventoryPlanningMethod: [null, [Validators.maxLength(16)]],
    leadTimeLotSize: [],
    fixedLeadTime: [],
    fixedOrderQuanitiy: [],
    fixedLotMultiplier: [null, [Validators.maxLength(8)]],
    currentSafetyStockQuantity: [],
    demandTimeFence: [null, [Validators.maxLength(12)]],
    demandTimeFenceDays: [],
    fixedDaysSupply: [],
    frozenItemCost: [],
    frozenMaterialCost: [],
    maxMinmaxQuantity: [],
    minMinmaxQuantity: [],
    orderQuantityMax: [],
    orderQuantityMin: [],
    planningTimeFenceDays: [],
    postprocessingLeadTime: [],
    preprocessingLeadTime: [],
    processingLeadTime: [],
    mdmGoHCategory: [null, [Validators.maxLength(12)]],
    resourceName: [null, [Validators.maxLength(10)]],
    usageRate: [],
    aslVmiEnabled: [null, [Validators.maxLength(1)]],
    aslConsignedFromSupplier: [null, [Validators.maxLength(1)]],
    aslSupplier: [null, [Validators.maxLength(60)]],
    aslSupplierNumber: [null, [Validators.maxLength(10)]],
    aslsupplierSite: [null, [Validators.maxLength(8)]],
    aslSupplierItem: [null, [Validators.maxLength(20)]],
    aslpurchasingUom: [null, [Validators.maxLength(3)]],
    slProcessCodeDetail: [null, [Validators.maxLength(25)]],
    slEffectiveFromDate: [],
    receiptRoutingDetail: [null, [Validators.maxLength(25)]],
    vmiPlanningParty: [null, [Validators.maxLength(35)]],
    listPrice: [],
    mdmGlobalId: [null, [Validators.maxLength(12)]],
    mdmArticleNumberYgart: [null, [Validators.maxLength(10)]],
    lotControl: [null, [Validators.maxLength(16)]],
    shelfLifeControl: [null, [Validators.maxLength(28)]],
    shelfLifeDays: [],
    serialNumberControl: [null, [Validators.maxLength(34)]],
    unitVolume: [],
    volumeUnitOfMeasure: [null, [Validators.maxLength(3)]],
    unitWeight: [],
    weightUnitOfMeasure: [null, [Validators.maxLength(2)]],
    unitsInABoxPackage: [],
    revisionControl: [null, [Validators.maxLength(6)]],
    dimensionUnitHeight: [],
    dimensionUnitLength: [],
    dimensionUnitWidth: [],
    dimensionUnitOfMeasure: [null, [Validators.maxLength(2)]],
    hazardousWeight: [null, [Validators.maxLength(255)]],
    franceAbcPickingCategory: [null, [Validators.maxLength(255)]],
    mdmTempConditionsCategory: [null, [Validators.maxLength(3)]],
    perishCodeCategory: [null, [Validators.maxLength(5)]],
    unNumber: [null, [Validators.maxLength(6)]],
    hazardClass: [null, [Validators.maxLength(4)]],
    unitOfIssue: [null, [Validators.maxLength(2)]],
    roundingFactor: [null, [Validators.maxLength(255)]],
    itemBuyerName: [null, [Validators.maxLength(40)]],
    hazardousWeightUom: [null, [Validators.maxLength(5)]],
    gphCode: [null, [Validators.maxLength(12)]],
    mos: [null, [Validators.maxLength(9)]],
    lpnPackage: [null, [Validators.maxLength(3)]],
    qteUnitairePalette: [],
    typeUm: [null, [Validators.maxLength(10)]],
    hauteurUm: [],
    longueurUm: [],
    largeurUm: [],
    qteUnitaireCarton: [],
    dimensionsUc: [null, [Validators.maxLength(18)]],
    specifications: [null, [Validators.maxLength(20)]],
    cadencePoste: [null, [Validators.maxLength(5)]],
    pfse: [null, [Validators.maxLength(40)]],
    rhenus: [null, [Validators.maxLength(255)]],
    testCapa: [null, [Validators.maxLength(8)]],
    abc: [null, [Validators.maxLength(1)]],
    itemCreationDate: [],
    categorieNm: [null, [Validators.maxLength(30)]]
  });

  constructor(protected itemService: ItemService, protected activatedRoute: ActivatedRoute, private fb: FormBuilder) {}

  ngOnInit(): void {
    this.activatedRoute.data.subscribe(({ item }) => {
      this.updateForm(item);
    });
  }

  updateForm(item: IItem): void {
    this.editForm.patchValue({
      id: item.id,
      organizationCode: item.organizationCode,
      businessUnit: item.businessUnit,
      businessUnitDescription: item.businessUnitDescription,
      businessField: item.businessField,
      businessFieldDescription: item.businessFieldDescription,
      businessLine: item.businessLine,
      businessLineDescription: item.businessLineDescription,
      workcenter: item.workcenter,
      productGroup: item.productGroup,
      productGroupDescription: item.productGroupDescription,
      productCategory: item.productCategory,
      productCategoryDescription: item.productCategoryDescription,
      productLine: item.productLine,
      productLineDescription: item.productLineDescription,
      productLineManager: item.productLineManager,
      productDivision: item.productDivision,
      productCategoryManager: item.productCategoryManager,
      plantCategory: item.plantCategory,
      itemType: item.itemType,
      primaryUnitOfMeasure: item.primaryUnitOfMeasure,
      itemNumber: item.itemNumber,
      itemDescription: item.itemDescription,
      inventoryItemStatusCode: item.inventoryItemStatusCode,
      planningMakeOrBuyCode: item.planningMakeOrBuyCode,
      itemPlannerCode: item.itemPlannerCode,
      plannerName: item.plannerName,
      mrpPlanningMethod: item.mrpPlanningMethod,
      inventoryPlanningMethod: item.inventoryPlanningMethod,
      leadTimeLotSize: item.leadTimeLotSize,
      fixedLeadTime: item.fixedLeadTime,
      fixedOrderQuanitiy: item.fixedOrderQuanitiy,
      fixedLotMultiplier: item.fixedLotMultiplier,
      currentSafetyStockQuantity: item.currentSafetyStockQuantity,
      demandTimeFence: item.demandTimeFence,
      demandTimeFenceDays: item.demandTimeFenceDays,
      fixedDaysSupply: item.fixedDaysSupply,
      frozenItemCost: item.frozenItemCost,
      frozenMaterialCost: item.frozenMaterialCost,
      maxMinmaxQuantity: item.maxMinmaxQuantity,
      minMinmaxQuantity: item.minMinmaxQuantity,
      orderQuantityMax: item.orderQuantityMax,
      orderQuantityMin: item.orderQuantityMin,
      planningTimeFenceDays: item.planningTimeFenceDays,
      postprocessingLeadTime: item.postprocessingLeadTime,
      preprocessingLeadTime: item.preprocessingLeadTime,
      processingLeadTime: item.processingLeadTime,
      mdmGoHCategory: item.mdmGoHCategory,
      resourceName: item.resourceName,
      usageRate: item.usageRate,
      aslVmiEnabled: item.aslVmiEnabled,
      aslConsignedFromSupplier: item.aslConsignedFromSupplier,
      aslSupplier: item.aslSupplier,
      aslSupplierNumber: item.aslSupplierNumber,
      aslsupplierSite: item.aslsupplierSite,
      aslSupplierItem: item.aslSupplierItem,
      aslpurchasingUom: item.aslpurchasingUom,
      slProcessCodeDetail: item.slProcessCodeDetail,
      slEffectiveFromDate: item.slEffectiveFromDate,
      receiptRoutingDetail: item.receiptRoutingDetail,
      vmiPlanningParty: item.vmiPlanningParty,
      listPrice: item.listPrice,
      mdmGlobalId: item.mdmGlobalId,
      mdmArticleNumberYgart: item.mdmArticleNumberYgart,
      lotControl: item.lotControl,
      shelfLifeControl: item.shelfLifeControl,
      shelfLifeDays: item.shelfLifeDays,
      serialNumberControl: item.serialNumberControl,
      unitVolume: item.unitVolume,
      volumeUnitOfMeasure: item.volumeUnitOfMeasure,
      unitWeight: item.unitWeight,
      weightUnitOfMeasure: item.weightUnitOfMeasure,
      unitsInABoxPackage: item.unitsInABoxPackage,
      revisionControl: item.revisionControl,
      dimensionUnitHeight: item.dimensionUnitHeight,
      dimensionUnitLength: item.dimensionUnitLength,
      dimensionUnitWidth: item.dimensionUnitWidth,
      dimensionUnitOfMeasure: item.dimensionUnitOfMeasure,
      hazardousWeight: item.hazardousWeight,
      franceAbcPickingCategory: item.franceAbcPickingCategory,
      mdmTempConditionsCategory: item.mdmTempConditionsCategory,
      perishCodeCategory: item.perishCodeCategory,
      unNumber: item.unNumber,
      hazardClass: item.hazardClass,
      unitOfIssue: item.unitOfIssue,
      roundingFactor: item.roundingFactor,
      itemBuyerName: item.itemBuyerName,
      hazardousWeightUom: item.hazardousWeightUom,
      gphCode: item.gphCode,
      mos: item.mos,
      lpnPackage: item.lpnPackage,
      qteUnitairePalette: item.qteUnitairePalette,
      typeUm: item.typeUm,
      hauteurUm: item.hauteurUm,
      longueurUm: item.longueurUm,
      largeurUm: item.largeurUm,
      qteUnitaireCarton: item.qteUnitaireCarton,
      dimensionsUc: item.dimensionsUc,
      specifications: item.specifications,
      cadencePoste: item.cadencePoste,
      pfse: item.pfse,
      rhenus: item.rhenus,
      testCapa: item.testCapa,
      abc: item.abc,
      itemCreationDate: item.itemCreationDate,
      categorieNm: item.categorieNm
    });
  }

  previousState(): void {
    window.history.back();
  }

  save(): void {
    this.isSaving = true;
    const item = this.createFromForm();
    if (item.id !== undefined) {
      this.subscribeToSaveResponse(this.itemService.update(item));
    } else {
      this.subscribeToSaveResponse(this.itemService.create(item));
    }
  }

  private createFromForm(): IItem {
    return {
      ...new Item(),
      id: this.editForm.get(['id'])!.value,
      organizationCode: this.editForm.get(['organizationCode'])!.value,
      businessUnit: this.editForm.get(['businessUnit'])!.value,
      businessUnitDescription: this.editForm.get(['businessUnitDescription'])!.value,
      businessField: this.editForm.get(['businessField'])!.value,
      businessFieldDescription: this.editForm.get(['businessFieldDescription'])!.value,
      businessLine: this.editForm.get(['businessLine'])!.value,
      businessLineDescription: this.editForm.get(['businessLineDescription'])!.value,
      workcenter: this.editForm.get(['workcenter'])!.value,
      productGroup: this.editForm.get(['productGroup'])!.value,
      productGroupDescription: this.editForm.get(['productGroupDescription'])!.value,
      productCategory: this.editForm.get(['productCategory'])!.value,
      productCategoryDescription: this.editForm.get(['productCategoryDescription'])!.value,
      productLine: this.editForm.get(['productLine'])!.value,
      productLineDescription: this.editForm.get(['productLineDescription'])!.value,
      productLineManager: this.editForm.get(['productLineManager'])!.value,
      productDivision: this.editForm.get(['productDivision'])!.value,
      productCategoryManager: this.editForm.get(['productCategoryManager'])!.value,
      plantCategory: this.editForm.get(['plantCategory'])!.value,
      itemType: this.editForm.get(['itemType'])!.value,
      primaryUnitOfMeasure: this.editForm.get(['primaryUnitOfMeasure'])!.value,
      itemNumber: this.editForm.get(['itemNumber'])!.value,
      itemDescription: this.editForm.get(['itemDescription'])!.value,
      inventoryItemStatusCode: this.editForm.get(['inventoryItemStatusCode'])!.value,
      planningMakeOrBuyCode: this.editForm.get(['planningMakeOrBuyCode'])!.value,
      itemPlannerCode: this.editForm.get(['itemPlannerCode'])!.value,
      plannerName: this.editForm.get(['plannerName'])!.value,
      mrpPlanningMethod: this.editForm.get(['mrpPlanningMethod'])!.value,
      inventoryPlanningMethod: this.editForm.get(['inventoryPlanningMethod'])!.value,
      leadTimeLotSize: this.editForm.get(['leadTimeLotSize'])!.value,
      fixedLeadTime: this.editForm.get(['fixedLeadTime'])!.value,
      fixedOrderQuanitiy: this.editForm.get(['fixedOrderQuanitiy'])!.value,
      fixedLotMultiplier: this.editForm.get(['fixedLotMultiplier'])!.value,
      currentSafetyStockQuantity: this.editForm.get(['currentSafetyStockQuantity'])!.value,
      demandTimeFence: this.editForm.get(['demandTimeFence'])!.value,
      demandTimeFenceDays: this.editForm.get(['demandTimeFenceDays'])!.value,
      fixedDaysSupply: this.editForm.get(['fixedDaysSupply'])!.value,
      frozenItemCost: this.editForm.get(['frozenItemCost'])!.value,
      frozenMaterialCost: this.editForm.get(['frozenMaterialCost'])!.value,
      maxMinmaxQuantity: this.editForm.get(['maxMinmaxQuantity'])!.value,
      minMinmaxQuantity: this.editForm.get(['minMinmaxQuantity'])!.value,
      orderQuantityMax: this.editForm.get(['orderQuantityMax'])!.value,
      orderQuantityMin: this.editForm.get(['orderQuantityMin'])!.value,
      planningTimeFenceDays: this.editForm.get(['planningTimeFenceDays'])!.value,
      postprocessingLeadTime: this.editForm.get(['postprocessingLeadTime'])!.value,
      preprocessingLeadTime: this.editForm.get(['preprocessingLeadTime'])!.value,
      processingLeadTime: this.editForm.get(['processingLeadTime'])!.value,
      mdmGoHCategory: this.editForm.get(['mdmGoHCategory'])!.value,
      resourceName: this.editForm.get(['resourceName'])!.value,
      usageRate: this.editForm.get(['usageRate'])!.value,
      aslVmiEnabled: this.editForm.get(['aslVmiEnabled'])!.value,
      aslConsignedFromSupplier: this.editForm.get(['aslConsignedFromSupplier'])!.value,
      aslSupplier: this.editForm.get(['aslSupplier'])!.value,
      aslSupplierNumber: this.editForm.get(['aslSupplierNumber'])!.value,
      aslsupplierSite: this.editForm.get(['aslsupplierSite'])!.value,
      aslSupplierItem: this.editForm.get(['aslSupplierItem'])!.value,
      aslpurchasingUom: this.editForm.get(['aslpurchasingUom'])!.value,
      slProcessCodeDetail: this.editForm.get(['slProcessCodeDetail'])!.value,
      slEffectiveFromDate: this.editForm.get(['slEffectiveFromDate'])!.value,
      receiptRoutingDetail: this.editForm.get(['receiptRoutingDetail'])!.value,
      vmiPlanningParty: this.editForm.get(['vmiPlanningParty'])!.value,
      listPrice: this.editForm.get(['listPrice'])!.value,
      mdmGlobalId: this.editForm.get(['mdmGlobalId'])!.value,
      mdmArticleNumberYgart: this.editForm.get(['mdmArticleNumberYgart'])!.value,
      lotControl: this.editForm.get(['lotControl'])!.value,
      shelfLifeControl: this.editForm.get(['shelfLifeControl'])!.value,
      shelfLifeDays: this.editForm.get(['shelfLifeDays'])!.value,
      serialNumberControl: this.editForm.get(['serialNumberControl'])!.value,
      unitVolume: this.editForm.get(['unitVolume'])!.value,
      volumeUnitOfMeasure: this.editForm.get(['volumeUnitOfMeasure'])!.value,
      unitWeight: this.editForm.get(['unitWeight'])!.value,
      weightUnitOfMeasure: this.editForm.get(['weightUnitOfMeasure'])!.value,
      unitsInABoxPackage: this.editForm.get(['unitsInABoxPackage'])!.value,
      revisionControl: this.editForm.get(['revisionControl'])!.value,
      dimensionUnitHeight: this.editForm.get(['dimensionUnitHeight'])!.value,
      dimensionUnitLength: this.editForm.get(['dimensionUnitLength'])!.value,
      dimensionUnitWidth: this.editForm.get(['dimensionUnitWidth'])!.value,
      dimensionUnitOfMeasure: this.editForm.get(['dimensionUnitOfMeasure'])!.value,
      hazardousWeight: this.editForm.get(['hazardousWeight'])!.value,
      franceAbcPickingCategory: this.editForm.get(['franceAbcPickingCategory'])!.value,
      mdmTempConditionsCategory: this.editForm.get(['mdmTempConditionsCategory'])!.value,
      perishCodeCategory: this.editForm.get(['perishCodeCategory'])!.value,
      unNumber: this.editForm.get(['unNumber'])!.value,
      hazardClass: this.editForm.get(['hazardClass'])!.value,
      unitOfIssue: this.editForm.get(['unitOfIssue'])!.value,
      roundingFactor: this.editForm.get(['roundingFactor'])!.value,
      itemBuyerName: this.editForm.get(['itemBuyerName'])!.value,
      hazardousWeightUom: this.editForm.get(['hazardousWeightUom'])!.value,
      gphCode: this.editForm.get(['gphCode'])!.value,
      mos: this.editForm.get(['mos'])!.value,
      lpnPackage: this.editForm.get(['lpnPackage'])!.value,
      qteUnitairePalette: this.editForm.get(['qteUnitairePalette'])!.value,
      typeUm: this.editForm.get(['typeUm'])!.value,
      hauteurUm: this.editForm.get(['hauteurUm'])!.value,
      longueurUm: this.editForm.get(['longueurUm'])!.value,
      largeurUm: this.editForm.get(['largeurUm'])!.value,
      qteUnitaireCarton: this.editForm.get(['qteUnitaireCarton'])!.value,
      dimensionsUc: this.editForm.get(['dimensionsUc'])!.value,
      specifications: this.editForm.get(['specifications'])!.value,
      cadencePoste: this.editForm.get(['cadencePoste'])!.value,
      pfse: this.editForm.get(['pfse'])!.value,
      rhenus: this.editForm.get(['rhenus'])!.value,
      testCapa: this.editForm.get(['testCapa'])!.value,
      abc: this.editForm.get(['abc'])!.value,
      itemCreationDate: this.editForm.get(['itemCreationDate'])!.value,
      categorieNm: this.editForm.get(['categorieNm'])!.value
    };
  }

  protected subscribeToSaveResponse(result: Observable<HttpResponse<IItem>>): void {
    result.subscribe(
      () => this.onSaveSuccess(),
      () => this.onSaveError()
    );
  }

  protected onSaveSuccess(): void {
    this.isSaving = false;
    this.previousState();
  }

  protected onSaveError(): void {
    this.isSaving = false;
  }
}
